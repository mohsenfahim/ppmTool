{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from \"./types\";\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\n  try {\n    await axios.post(`/api/backlog/${backlog_id}`, project_task); // base URL is proxy defined in package.json\n\n    history.push(`/projectBoard/${backlog_id}`);\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const getBacklog = backlog_id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/backlog/${backlog_id}`); //base URL is proxy defined in package.json\n\n    dispatch({\n      type: GET_BACKLOG,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    }); //history.push(`/projectBoard/${backlog_id}`);\n  }\n};\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n  try {\n    const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n    dispatch({\n      type: GET_PROJECT_TASK,\n      payload: res.data\n    });\n  } catch (err) {\n    history.push(`/dashboard`);\n  }\n};\nexport const updateProjectTask = (backlog_id, pt_id, project_task, history) => async dispatch => {\n  try {\n    await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n    history.push(`/projectBoard/${backlog_id}`);\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const deleteProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n  var msg = \"Are you sure? This will delete this task \" + pt_id + \" and all the data related to it! Can't be undone\";\n\n  if (window.confirm(msg)) {\n    await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n    dispatch({\n      type: DELETE_PROJECT_TASK,\n      payload: pt_id\n    });\n    history.push(`/projectBoard/${backlog_id}`);\n  }\n};","map":{"version":3,"sources":["C:/Users/fahimm/IdeaProjects/ppmtool/ppmtool-react-client/src/actions/backlogActions.js"],"names":["axios","GET_ERRORS","GET_BACKLOG","GET_PROJECT_TASK","DELETE_PROJECT_TASK","addProjectTask","backlog_id","project_task","history","dispatch","post","push","type","payload","err","response","data","getBacklog","res","get","getProjectTask","pt_id","updateProjectTask","patch","deleteProjectTask","msg","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_ERRORS,\r\n  GET_BACKLOG,\r\n  GET_PROJECT_TASK,\r\n  DELETE_PROJECT_TASK\r\n} from \"./types\";\r\n\r\nexport const addProjectTask = (\r\n  backlog_id,\r\n  project_task,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    await axios.post(`/api/backlog/${backlog_id}`, project_task); // base URL is proxy defined in package.json\r\n    history.push(`/projectBoard/${backlog_id}`);\r\n\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const getBacklog = backlog_id => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/backlog/${backlog_id}`); //base URL is proxy defined in package.json\r\n    dispatch({\r\n      type: GET_BACKLOG,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n    //history.push(`/projectBoard/${backlog_id}`);\r\n  }\r\n};\r\n\r\nexport const getProjectTask = (\r\n  backlog_id,\r\n  pt_id,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\r\n    dispatch({\r\n      type: GET_PROJECT_TASK,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    history.push(`/dashboard`);\r\n  }\r\n};\r\n\r\nexport const updateProjectTask = (\r\n  backlog_id,\r\n  pt_id,\r\n  project_task,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\r\n    history.push(`/projectBoard/${backlog_id}`);\r\n\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: {}\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: err.response.data\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteProjectTask = (\r\n  backlog_id,\r\n  pt_id,\r\n  history\r\n) => async dispatch => {\r\n  var msg =\r\n    \"Are you sure? This will delete this task \" +\r\n    pt_id +\r\n    \" and all the data related to it! Can't be undone\";\r\n  if (window.confirm(msg)) {\r\n    await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\r\n\r\n    dispatch({\r\n      type: DELETE_PROJECT_TASK,\r\n      payload: pt_id\r\n    });\r\n\r\n    history.push(`/projectBoard/${backlog_id}`);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}